!SESSION 2017-05-04 16:29:40.821 -----------------------------------------------
eclipse.buildId=4.6.3.M20170301-0400
java.version=1.8.0_121
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_CN
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file D:\Database\DataBase_Project\.metadata\.bak_2.log
Created Time: 2017-05-04 17:59:27.167

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:27.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.168
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.168
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:27.170
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.170
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:27.249
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:27.252
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.252
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.252
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:27.253
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:27.254
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:27.897
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:27.898
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:30.694
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;// 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:30.695
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.695
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.695
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:30.696
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.696
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:30.800
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;// 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:30.801
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.801
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.801
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:30.802
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:30.802
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:38.730
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:38.732
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.732
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.732
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:38.733
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.733
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:38.765
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:38.765
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:38.854
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:38.856
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.856
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.856
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:38.857
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:38.857
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:40.270
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:40.272
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.272
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.272
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:40.273
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.273
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:40.401
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有 
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:40.403
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.403
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.403
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:40.404
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:40.404
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:41.928
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有多少
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:41.929
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:41.929
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:41.929
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:41.931
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:41.931
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:45.802
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有多少图书种类
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:45.803
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.804
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.804
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:45.805
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.805
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:45.957
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//*****************************************************/
   	int typenum=50;//用于存放有多少图书种类
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:45.958
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.958
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.958
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:45.959
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:45.959
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:46.247
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:46.248
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:48.351
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:48.352
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:692)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1190)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:551)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:543)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:486)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:173)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:158)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:55.488
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//***************** ************************************/
   	int typenum=50;//用于存放有多少图书种类
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2017-05-04 17:59:55.490
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:55.490
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:55.490
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2017-05-04 17:59:55.491
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	... 19 more
Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2017-05-04 17:59:55.491
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2017-05-04 17:59:56.515
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package manager.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

import manager.dao.BookDao;
import manager.dao.BookTypeDao;
import manager.dao.BorrowDao;
import manager.dao.UserDao;
import manager.dao.bookRecomDao;
import manager.entity.Book;
import manager.entity.BookRecommend;
import manager.entity.BookType;
import manager.entity.Borrow;
import manager.entity.HisBorrow;
import manager.entity.User;
import manager.util.DbUtil;
import manager.util.Dialogutil;
import manager.util.PieChart;
import manager.util.ShowConfirmDialog;
import manager.util.StringUtil;
import manager.util.TimeSeriesChart;
import manager.util.showMessageFrame;

public class userMainFrm extends JFrame {

	private String PresentUser;
	
  //设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    private final static double split_scale=0.25;
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
    //容器组件
    private JPanel contentPane;
    private JSplitPane splitPane = new JSplitPane();
    JPanel TutorJp = new JPanel();
    JPanel OperationJp = new JPanel();
    JPanel PreBorrowJP = new JPanel();
    JPanel RecomJP = new JPanel();
    JPanel HisBorrowJP=new JPanel();
    //控件
    private JComboBox booktypeJcb;  //查询界面书类选择	
//   	private final JLabel lblNewLabel = new JLabel("\u56FE\u4E66\u540D\u79F0");
//   	private final JTextField textField = new JTextField();
//   	private final JButton button = new JButton("\u67E5\u8BE2");
//   	private final JLabel label_1 = new JLabel("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
   	private JTextField BookNameTxt;
   	private JTable BookSearchJT;
    private JTable PreBorrowJtable;
    private JTable HisBorrowJtable;
   	//根据左边按钮选择显示哪一个界面
 	//1是查询，2是当前借阅，3是历史借阅信息，5是推荐
   	private int ShowSelect=1;
  
   	private JTextArea RecomReasonTxt;
   	private JTextArea BookDescTxt;
   	private JComboBox BookTypeJcb;//推荐界面
   	private JTextField RecomNameTxt;
   	//*******************借书事件变量**********************/
   	private boolean IsClickJT=false;
   	private int BookID;
   	private int BookSurplus;
	//*******************还书事件变量**********************/
   	private boolean IsClickPreBorrowJT=false;
   	private int BorrowID;
   	private int[]IDinPreBorJT=new int[30];//用于记录当前PreBorrowJtable中每行对应的借阅ID,其实每个人最多借8本
   	//***************** ************************************/
   	int typenum=50;//用于存放有多少图书种类
   //JDBC接口	
    private DbUtil  dbUtil=new DbUtil();
    private UserDao userdao=new UserDao();
    private BookTypeDao bookTypeDao=new BookTypeDao();
   	private BookDao bookDao=new BookDao();
   	private BorrowDao borrowDao=new BorrowDao();
    private bookRecomDao BookRecomDao=new bookRecomDao();
   
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					userMainFrm frame = new userMainFrm();
//					frame.setVisible(true);
//					frame.splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//					frame.splitPane.setEnabled(false);            //设置分隔条禁止拖动  					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

//	public userMainFrm() throws HeadlessException
//	{
//		super();
//		// TODO Auto-generated constructor stub
//	}

	/**
	 * Create the frame.
	 */
	public userMainFrm () //String User
	{
		 //PresentUser=User;//单窗口调试请注释
		
//		button.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
//		button.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setFont(new Font("宋体", Font.PLAIN, 35));
//		textField.setColumns(10);
//		lblNewLabel.setFont(new Font("宋体", Font.PLAIN, 35));
		setTitle("\u7528\u6237\u4E3B\u754C\u9762");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//设置JFrame最大化,要放在setVisible之后才能刷新，否则只执行一次
		setExtendedState(JFrame.MAXIMIZED_BOTH); 
		//setResizable(false);
	//	setBounds(0, 0, screenWidth,screenHeight);
		setSize(new Dimension(screenSize.width,screenSize.height));
		
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight();

		
		//分屏
		this.getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);
		splitPane.add(TutorJp, JSplitPane.LEFT);
		
		GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		JLayeredPane SearchJlp = new JLayeredPane();

//		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
//		label_1.setBounds(41, 0, 135, 35);		
//		SearchJlp.add(label_1);
	//*************************************左边************************************************/		
		TutorJp.setLayout(gl_TutorJp);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 762, 1120);
		//创立三个内窗口
		JInternalFrame SearchJIF = new JInternalFrame("\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605");
		SearchJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		BasicInternalFrameUI ui = (BasicInternalFrameUI)SearchJIF.getUI();
		ui.setNorthPane(null);		
		SearchJIF.setBorder(BorderFactory.createEmptyBorder());
		SearchJIF.setVisible(true);		
		JInternalFrame ID_JIF = new JInternalFrame("\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E");
		//去边框
		BasicInternalFrameUI ui_1 = (BasicInternalFrameUI)ID_JIF.getUI();
		ui_1.setNorthPane(null);
		ID_JIF.setBorder(BorderFactory.createEmptyBorder());		
		ID_JIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		ID_JIF.setVisible(true);		
		JInternalFrame RecomJIF = new JInternalFrame("\u63A8\u8350\u4FE1\u606F");
		RecomJIF.getContentPane().setFont(new Font("宋体", Font.PLAIN, 35));
		//去边框
		BasicInternalFrameUI RecomUI = (BasicInternalFrameUI)RecomJIF.getUI();
		RecomUI.setNorthPane(null);
		RecomJIF.setBorder(BorderFactory.createEmptyBorder());
		JPanel RecommendJP = new JPanel();
		RecommendJP.setBorder(new TitledBorder(null, "\u63A8\u8350\u4FE1\u606F", TitledBorder.LEADING, 
				TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));		
		JPanel ExitJPL = new JPanel();
		ExitJPL.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "\u5B89\u5168\u9000\u51FA\u7CFB\u7EDF", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), Color.DARK_GRAY));
		
		//边框布局
		GroupLayout groupLayout_2 = new GroupLayout(RecomJIF.getContentPane());
		groupLayout_2.setHorizontalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addComponent(RecommendJP, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
		);
		groupLayout_2.setVerticalGroup(
			groupLayout_2.createParallelGroup(Alignment.LEADING)
				.addGroup(Alignment.TRAILING, groupLayout_2.createSequentialGroup()
					.addComponent(RecommendJP, GroupLayout.PREFERRED_SIZE, 237, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		RecommendJP.setLayout(null);
		
		
		RecomJIF.getContentPane().setLayout(groupLayout_2);
		RecomJIF.setVisible(true);
		
		//GroupLayout gl_TutorJp = new GroupLayout(TutorJp);
		gl_TutorJp.setHorizontalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addComponent(SearchJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ID_JIF, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(RecomJIF, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
					.addComponent(ExitJPL, GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
			);
			gl_TutorJp.setVerticalGroup(
				gl_TutorJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_TutorJp.createSequentialGroup()
						.addComponent(SearchJIF, GroupLayout.PREFERRED_SIZE, 459, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(ID_JIF, GroupLayout.PREFERRED_SIZE, 491, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.UNRELATED)
						.addComponent(RecomJIF, GroupLayout.DEFAULT_SIZE, 298,GroupLayout.PREFERRED_SIZE )
						.addComponent(ExitJPL, GroupLayout.PREFERRED_SIZE, 260, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))//Short.MAX_VALUE
					   
			);
		
		//为每一个InterJframe增添组件	
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "\u4E2A\u4EBA\u4FE1\u606F\u8BBE\u7F6E", TitledBorder.LEADING, TitledBorder.TOP, 
				new Font("宋体", Font.PLAIN, 35), null));
		GroupLayout groupLayout_1 = new GroupLayout(ID_JIF.getContentPane());
		groupLayout_1.setHorizontalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
		);
		groupLayout_1.setVerticalGroup(
			groupLayout_1.createParallelGroup(Alignment.LEADING)
				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
		);
		
		//标签
		JLabel IDJLB = new JLabel("",JLabel.CENTER);		
		IDJLB.setFont(new Font("宋体", Font.PLAIN, 35));
		JLabel RecomJLb = new JLabel("",JLabel.CENTER);
		RecomJLb.setBounds(254, 41, 256, 73);
		RecomJLb.setFont(new Font("宋体", Font.PLAIN, 35));
		RecommendJP.add(RecomJLb);
		
		JLabel Daily_Op = new JLabel("",JLabel.CENTER);
		Daily_Op.setBounds(247, 43, 264, 91);
		Daily_Op.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton CertificateJB = new JButton("\u8BC1\u4EF6\u4FE1\u606F");
		CertificateJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton PreBorrowInfo = new JButton("\u5F53\u524D\u501F\u9605");
		PreBorrowInfo.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowInfo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				ShowSelect=2;				
				FreshShow();	
			}
		});
		
		JButton HistoryBorrow = new JButton("\u501F\u9605\u5386\u53F2");
		HistoryBorrow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=3;				
				FreshShow();
			
			}


		});
		HistoryBorrow.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(188)
							.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(255)
							.addGroup(gl_panel.createParallelGroup(Alignment.TRAILING, false)
								.addComponent(HistoryBorrow, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(PreBorrowInfo, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(CertificateJB, Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE))))
					.addContainerGap(224, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(IDJLB, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(CertificateJB, GroupLayout.PREFERRED_SIZE, 65, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(PreBorrowInfo, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addComponent(HistoryBorrow, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(41, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		ID_JIF.getContentPane().setLayout(groupLayout_1);
		
		//图片准备
		int width = 300,height = 100; //这是图片和JLable的宽度和高度   
		ImageIcon icon = new ImageIcon("src/res/dayly_op.png");  
		ImageIcon ID_icon = new ImageIcon("src/res/ID_Info.png");  
		ImageIcon Recom_icon = new ImageIcon("src/res/Recommend.png");
		//改变图片大小          
		icon.setImage(icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));//80和100为大小 可以自由设置       
		ID_icon.setImage(ID_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		Recom_icon.setImage(Recom_icon.getImage().getScaledInstance(width,height,Image.SCALE_DEFAULT));
		
		//添加图片
		Daily_Op.setIcon(icon);
		IDJLB.setIcon(ID_icon);
		RecomJLb.setIcon(Recom_icon);
		
		JPanel dayly_panel = new JPanel();
		dayly_panel.setBorder(new TitledBorder(null, "\u56FE\u4E66\u67E5\u8BE2\u4E0E\u501F\u9605", 
				TitledBorder.LEADING, TitledBorder.TOP, new Font("宋体", Font.PLAIN, 35), null));
		
		GroupLayout groupLayout = new GroupLayout(SearchJIF.getContentPane());
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addComponent(dayly_panel, GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
		);					
		
		JButton SearchButton = new JButton("\u56FE\u4E66\u67E5\u8BE2");
		SearchButton.setBounds(273, 149, 222, 59);
		SearchButton.setFont(new Font("宋体", Font.PLAIN, 35));
		SearchButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ShowSelect=1;				
				FreshShow();
				}	
		});
		
		JButton BorrowButton = new JButton("\u56FE\u4E66\u501F\u9605");
		BorrowButton.setBounds(273, 221, 222, 64);
		BorrowButton.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.setLayout(null);		
		BorrowButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				borrowActionPerformed(evt);
			}			
		});
		
		JButton ReturnButurn = new JButton("\u56FE\u4E66\u5F52\u8FD8");
		ReturnButurn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
							returnactionPerformed(e);	
			}
		});
		ReturnButurn.setBounds(273, 295, 222, 59);
		ReturnButurn.setFont(new Font("宋体", Font.PLAIN, 35));
		dayly_panel.add(ReturnButurn);
		dayly_panel.add(Daily_Op);
		dayly_panel.add(SearchButton);
		dayly_panel.add(BorrowButton);
		
		JButton RecomJB = new JButton("\u56FE\u4E66\u63A8\u8350");
		RecomJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ShowSelect=5;				
				FreshShow();	
			}
		});
		RecomJB.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomJB.setBounds(278, 130, 207, 59);
		RecommendJP.add(RecomJB);
		SearchJIF.getContentPane().setLayout(groupLayout);
		
		//退出按钮
		JButton exitButton = new JButton("");
		exitButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent exit) {
				ShowConfirmDialog confrm=new ShowConfirmDialog(null,"提示","是否退出系统");
					new Thread(
						new Runnable() {							 
						    @Override
						public void run(){
							do
							{
								try {
									Thread.sleep(10);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}while(confrm.getResult()==-1);							
					if(confrm.getResult()==0)
				          {
						     dispose(); //清除主窗口
				          }		
				}						
			}).start();
			}			
		});
		int exit_width=203,exit_height=65;
		exitButton.setFont(new Font("宋体", Font.PLAIN, 35));
		ImageIcon exiticon = new ImageIcon("src/res/exit.PNG");
		exiticon.setImage(exiticon.getImage().getScaledInstance(exit_width, exit_height,Image.SCALE_DEFAULT ));
		exitButton.setIcon(exiticon);
		GroupLayout gl_ExitJPL = new GroupLayout(ExitJPL);
		gl_ExitJPL.setHorizontalGroup(
				gl_ExitJPL.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_ExitJPL.createSequentialGroup()
						.addGap(248)
						.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_width, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(278, Short.MAX_VALUE))
			);
		gl_ExitJPL.setVerticalGroup(
			gl_ExitJPL.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_ExitJPL.createSequentialGroup()
					.addGap(54)
					.addComponent(exitButton, GroupLayout.PREFERRED_SIZE, exit_height, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(95, Short.MAX_VALUE))
		);
		ExitJPL.setLayout(gl_ExitJPL);
		

		
		
		
		
		/**********************************右边屏幕**************************************************/	
		//调试时候使用，发布时候请注释
		//splitPane.add(OperationJp, JSplitPane.RIGHT);
		//splitPane.setRightComponent(RecomJP);
		//splitPane.setRightComponent(PreBorrowJP);	//图书归还界面
		 splitPane.setRightComponent(HisBorrowJP);
		 /***************************返回按钮*******************************/
		JLabel ReturnJL = new JLabel("\u5F53\u524D\u501F\u9605");
		ReturnJL.setEnabled(false);
		ReturnJL.setFont(new Font("宋体", Font.PLAIN, 35));
		/***************************当前借阅界面*********************************************/
		JScrollPane PreBorrowJsp = new JScrollPane();
		PreBorrowJsp.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent ret) {
				//bookReturnClick(ret);
			}	
		});
		
		JButton PreBorSearButton = new JButton("\u67E5\u8BE2");
		PreBorSearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				PreBorrowSearchPerformed(e);
			}			
		});
		PreBorSearButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
		PreBorSearButton.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_PreBorrowJP = new GroupLayout(PreBorrowJP);
		gl_PreBorrowJP.setHorizontalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
						.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 1927, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_PreBorrowJP.createSequentialGroup()
							.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
							.addGap(133)
							.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(476, Short.MAX_VALUE))
		);
		gl_PreBorrowJP.setVerticalGroup(
			gl_PreBorrowJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_PreBorrowJP.createSequentialGroup()
					.addGap(191)
					.addGroup(gl_PreBorrowJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(ReturnJL, GroupLayout.PREFERRED_SIZE, 57, GroupLayout.PREFERRED_SIZE)
						.addComponent(PreBorSearButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
					.addGap(62)
					.addComponent(PreBorrowJsp, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(961, Short.MAX_VALUE))
		);
		
		PreBorrowJtable = new JTable();
		PreBorrowJtable.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"\u7528\u6237ID", "\u5F53\u524D\u501F\u9605", "\u5E94\u8FD8\u65E5\u671F"
			}
		) {
			boolean[] columnEditables = new boolean[] {
				false, false, false
			};
			public boolean isCellEditable(int row, int column) {
				return columnEditables[column];
			}
		});
		PreBorrowJtable.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent ret) {
				bookReturnClick(ret);
			}	
		});
		PreBorrowJtable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		PreBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
		PreBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
		PreBorrowJtable.setRowHeight((int)(80*enlargement_y));
		PreBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(209);
		PreBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(406);
		PreBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(221);
		PreBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 35));
		PreBorrowJsp.add(PreBorrowJtable);
		PreBorrowJsp.setViewportView(PreBorrowJtable);
		
		PreBorrowJP.setLayout(gl_PreBorrowJP);
		
		/***************************推荐界面********************************************/
		JLabel RecomNameJL = new JLabel("\u63A8\u8350\u4E66\u540D");
		RecomNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		RecomNameTxt = new JTextField();
		RecomNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomNameTxt.setColumns(10);
		
		JButton RecomConfirJB = new JButton("\u63A8\u8350");
		RecomConfirJB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent rec) {
				RecomactionPerformed(rec);
			}

		
		});
		RecomConfirJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/Recom.png")));
		
		RecomConfirJB.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel RecomTypeJL = new JLabel("\u56FE\u4E66\u7C7B\u578B");
		RecomTypeJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		BookTypeJcb = new JComboBox();
		BookTypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel BookDescJL = new JLabel("\u56FE\u4E66\u63CF\u8FF0");
		BookDescJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane DescJsp = new JScrollPane();
		
		JLabel ReasonJL = new JLabel("\u63A8\u8350\u7406\u7531");
		ReasonJL.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JScrollPane RecomJsp = new JScrollPane();
		GroupLayout gl_RecomJP = new GroupLayout(RecomJP);
		gl_RecomJP.setHorizontalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(176)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(RecomNameJL)
						.addComponent(RecomTypeJL)
						.addComponent(BookDescJL)
						.addComponent(ReasonJL))
					.addGap(44)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, 306, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
								.addComponent(RecomNameTxt, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(DescJsp, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE)
								.addComponent(RecomJsp, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 1643, Short.MAX_VALUE))
							.addGap(163)
							.addComponent(RecomConfirJB, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)))
					.addGap(72))
		);
		gl_RecomJP.setVerticalGroup(
			gl_RecomJP.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_RecomJP.createSequentialGroup()
					.addGap(167)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomNameJL)
						.addComponent(RecomNameTxt, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)
						.addComponent(RecomConfirJB))
					.addGap(128)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(RecomTypeJL)
						.addComponent(BookTypeJcb, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(156)
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.BASELINE)
						.addComponent(BookDescJL)
						.addComponent(DescJsp, GroupLayout.PREFERRED_SIZE, 259, GroupLayout.PREFERRED_SIZE))
					.addGroup(gl_RecomJP.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(117)
							.addComponent(ReasonJL))
						.addGroup(gl_RecomJP.createSequentialGroup()
							.addGap(130)
							.addComponent(RecomJsp, GroupLayout.PREFERRED_SIZE, 445, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(331, Short.MAX_VALUE))
		);
		
		RecomReasonTxt = new JTextArea();
		RecomReasonTxt.setEditable(true);
		RecomReasonTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		RecomReasonTxt.setText("");
		RecomJsp.add(RecomReasonTxt);
		RecomJsp.setViewportView(RecomReasonTxt);
		RecomReasonTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
		BookDescTxt = new JTextArea();
		BookDescTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		DescJsp.add(BookDescTxt);
		DescJsp.setViewportView(BookDescTxt);
		RecomJP.setLayout(gl_RecomJP);
		 // 设置文本域边框
		BookDescTxt.setBorder(new LineBorder(new Color(127, 157, 185)));
		
			booktypeJcb = new JComboBox();
			booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JLabel BookNameJL = new JLabel("\u56FE\u4E66\u540D\u79F0");
			BookNameJL.setFont(new Font("宋体", Font.PLAIN, 35));
			
			BookNameTxt = new JTextField();
			BookNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
			BookNameTxt.setColumns(10);
	/****************************查询界面***********************************************/		
			JButton SearchBookJB = new JButton("\u67E5\u8BE2");
			SearchBookJB.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					BookSearchActionPerformed(evt);
					}		
			});
			SearchBookJB.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			SearchBookJB.setFont(new Font("宋体", Font.PLAIN, 35));
			
			JScrollPane BookSearchJsp = new JScrollPane();
			GroupLayout gl_OperationJp = new GroupLayout(OperationJp);
			gl_OperationJp.setHorizontalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(159)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BookSearchJsp, Alignment.LEADING)
							.addGroup(Alignment.LEADING, gl_OperationJp.createSequentialGroup()
								.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE)
								.addGap(74)
								.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 1112, GroupLayout.PREFERRED_SIZE)
								.addGap(89)
								.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(945, Short.MAX_VALUE))
			);
			gl_OperationJp.setVerticalGroup(
				gl_OperationJp.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_OperationJp.createSequentialGroup()
						.addGap(131)
						.addGroup(gl_OperationJp.createParallelGroup(Alignment.BASELINE)
							.addComponent(booktypeJcb, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameJL, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
							.addComponent(BookNameTxt, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addComponent(SearchBookJB, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
						.addGap(111)
						.addComponent(BookSearchJsp, GroupLayout.PREFERRED_SIZE, 1017, GroupLayout.PREFERRED_SIZE)
						.addContainerGap(409, Short.MAX_VALUE))
			);
			
			BookSearchJT = new JTable();
			BookSearchJT.addMouseListener(new MouseAdapter() {
				@Override
				public void mousePressed(MouseEvent e) {
					bookSearchJTMousePressed(e);				
				}
			});
			BookSearchJT.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
				"图书ID","\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u56FE\u4E66\u63CF\u8FF0", "\u5269\u4F59\u672C\u6570"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, false, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			BookSearchJT.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			//修改表头大小和字体大小
			BookSearchJT.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			BookSearchJT.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			BookSearchJT.setRowHeight((int)(80*enlargement_y));
			
			BookSearchJT.getColumnModel().getColumn(0).setPreferredWidth(200);
			BookSearchJT.getColumnModel().getColumn(1).setPreferredWidth(266);
			BookSearchJT.getColumnModel().getColumn(2).setPreferredWidth(217);
			BookSearchJT.getColumnModel().getColumn(3).setPreferredWidth(285);
			BookSearchJT.getColumnModel().getColumn(4).setPreferredWidth(523);
			BookSearchJT.getColumnModel().getColumn(5).setPreferredWidth(249);
			
			BookSearchJT.setFont(new Font("宋体", Font.PLAIN, 35));
			//BookSearchJsp.add(BookSearchJT);
			BookSearchJsp.setViewportView(BookSearchJT);
			OperationJp.setLayout(gl_OperationJp);
	/*****************************借阅历史界面**********************************************/		
			
			JLabel label = new JLabel("\u5386\u53F2\u501F\u9605",JLabel.CENTER);
			label.setEnabled(false);
			label.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JButton HisBorSearchButton = new JButton("\u67E5\u8BE2");
			HisBorSearchButton.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					hisBorrowactionPerformed(e);
				}
			});
			HisBorSearchButton.setIcon(new ImageIcon(userMainFrm.class.getResource("/manager/image/search.png")));
			HisBorSearchButton.setFont(new Font("幼圆", Font.BOLD, 35));
			
			JScrollPane HisBorrowJsp = new JScrollPane();
			
			JPanel PieChartJP = new JPanel();
			
			JPanel BrokenLineJP = new JPanel();
			
			GroupLayout gl_HisBorrowJP = new GroupLayout(HisBorrowJP);
			gl_HisBorrowJP.setHorizontalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(254)
								.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
									.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 2024, GroupLayout.PREFERRED_SIZE)
									.addGroup(gl_HisBorrowJP.createSequentialGroup()
										.addComponent(label, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE)
										.addGap(261)
										.addComponent(HisBorSearchButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE))))
							.addGroup(gl_HisBorrowJP.createSequentialGroup()
								.addGap(136)
								.addComponent(PieChartJP, GroupLayout.PREFERRED_SIZE, 847, GroupLayout.PREFERRED_SIZE)
								.addGap(77)
								.addComponent(BrokenLineJP, GroupLayout.PREFERRED_SIZE, 1485, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(143, Short.MAX_VALUE))
			);
			gl_HisBorrowJP.setVerticalGroup(
				gl_HisBorrowJP.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_HisBorrowJP.createSequentialGroup()
						.addGap(204)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.BASELINE)
							.addComponent(label, GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
							.addComponent(HisBorSearchButton))
						.addGap(115)
						.addComponent(HisBorrowJsp, GroupLayout.PREFERRED_SIZE, 605, GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
						.addGroup(gl_HisBorrowJP.createParallelGroup(Alignment.TRAILING, false)
							.addComponent(BrokenLineJP, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
							.addComponent(PieChartJP, GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
						.addContainerGap())
			);
			//布局
			FlowLayout  pieflow=new FlowLayout(FlowLayout.CENTER );
			PieChartJP.setLayout(pieflow);
			FlowLayout  Lineflow=new FlowLayout(FlowLayout.CENTER );
			BrokenLineJP.setLayout(Lineflow);
			//获得当前窗口大小
			Dimension PieDi=new Dimension(847,678);//这个值要手动调整
			//PieChartJP.getSize(PieDi);//setVisuale之前得到是0！
			//获得数据集
			int []TypeNum=new int[typenum];
			HisBorrowPieChart(StringBuffer[] TypeBuffer,int number);
			PieChartJP.add(new PieChart(PieDi).getChartPanel());           //添加饼状图  
			BrokenLineJP.add(new TimeSeriesChart().getChartPanel());    //添加折线图  
			HisBorrowJtable = new JTable();
			HisBorrowJtable.setModel(new DefaultTableModel(
				new Object[][] {
				},
				new String[] {
					"\u56FE\u4E66\u540D\u79F0", "\u56FE\u4E66\u4F5C\u8005", "\u51FA\u7248\u793E", "\u501F\u9605\u65F6\u95F4", "\u5F52\u8FD8\u65F6\u95F4"
				}
			) {
				boolean[] columnEditables = new boolean[] {
					false, false, true, false, false
				};
				public boolean isCellEditable(int row, int column) {
					return columnEditables[column];
				}
			});
			//修改表头大小和字体大小
			HisBorrowJtable.getTableHeader().setPreferredSize(new Dimension((int)(1*enlargement_x),(int)(40*enlargement_y)));
			HisBorrowJtable.getTableHeader().setFont(new Font("宋体", Font.PLAIN, (int)(35*enlargement_y)));
			HisBorrowJtable.setRowHeight((int)(80*enlargement_y));
			HisBorrowJtable.getColumnModel().getColumn(0).setPreferredWidth(324);
			HisBorrowJtable.getColumnModel().getColumn(1).setPreferredWidth(182);
			HisBorrowJtable.getColumnModel().getColumn(2).setPreferredWidth(237);
			HisBorrowJtable.getColumnModel().getColumn(3).setPreferredWidth(272);
			HisBorrowJtable.getColumnModel().getColumn(4).setPreferredWidth(227);
			HisBorrowJtable.setFont(new Font("宋体", Font.PLAIN, 36));
			//HisBorrowJP.add(HisBorrowJtable);
			HisBorrowJsp.setViewportView(HisBorrowJtable);
			HisBorrowJP.setLayout(gl_HisBorrowJP);
			
			//选择界面
		    FreshShow();
		    
		  /*****初始化事件***/
	    this.addComponentListener(new ComponentAdapter()//初始化分割比
	    {
	        public void componentResized(ComponentEvent e) {
	        	splitPane.setDividerLocation(split_scale);
	        }
	    });
//		setVisible(true);
//		splitPane.setDividerLocation(split_scale);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
//		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	
		fillBookType();//初始化下拉框
	}
	
	

	public void FreshShow()
	{				
//		booktypeJcb = new JComboBox();
//		booktypeJcb.setFont(new Font("宋体", Font.PLAIN, 35));							    
//********************选择右边显示的界面*******************************/	    
	    switch(ShowSelect)
		{
	       case 1:
	    	   splitPane.add(OperationJp, JSplitPane.RIGHT);
	    	   PreBorrowJP.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   OperationJp.setVisible(true);	    	  
	           break;
	       case 2:	    	   
	    	   splitPane.setRightComponent(PreBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   HisBorrowJP.setVisible(false);
	    	   PreBorrowJP.setVisible(true);
	    	   break;
	       case 3:
	    	   splitPane.setRightComponent(HisBorrowJP);
	    	   OperationJp.setVisible(false);
	    	   RecomJP.setVisible(false);
	    	   PreBorrowJP.setVisible(false);
	    	   HisBorrowJP.setVisible(true);
	    	   break;
	       case 4:
	    	   break;
	       default:splitPane.setRightComponent(RecomJP);
	               PreBorrowJP.setVisible(false);
	               OperationJp.setVisible(false);
	               HisBorrowJP.setVisible(false);
	               RecomJP.setVisible(true);
	    	   break;
	    }	 
		setVisible(true);
		splitPane.setDividerLocation(0.25);//设定分割面板的左右比例(这时候就生效了，如果放在setVisible(true)这据之前就不会有效果。
		splitPane.setEnabled(false);            //设置分隔条禁止拖动  	    	  
//		fillBookType();//初始化下拉框
	}
	
	/**
	 * 重置表单
	 */
	private void ResetValue()
	{
//		booktypeJcb=null;
//		BookNameTxt=null;
//		BookSearchJT=null;
		switch(ShowSelect)
		{
		case 1:break;
		case 2:
			if(this.PreBorrowJtable.getRowCount()>0)
				{
				  DefaultTableModel tableModel = (DefaultTableModel)PreBorrowJtable.getModel();
				  tableModel.setRowCount( 0 );
				}
//			  int num = PreBorrowJtable.getModel().getRowCount(); //得到此数据表中的行数      
//			  for (int i = 0; i < num; i++)     //利用循环依次清空所有行      
//				  PreBorrowJtable.getModel().removeRow(0);
			  break;
		case 3:break;
		case 4:break;
		default://推荐窗口
		this.RecomNameTxt.setText("");
		this.BookDescTxt.setText("");
		this.RecomReasonTxt .setText("");
		if(this.BookTypeJcb.getItemCount()>0){
			this.BookTypeJcb.setSelectedIndex(0);
		}
		break;
		}
	}
	
	/**
	 * 初始化图书类别下拉框
	 */
	private void fillBookType(){
		Connection con=null;
		BookType bookType=null;
		try{
			con=dbUtil.getCon();
			ResultSet rs=bookTypeDao.list(con, new BookType());
			//添加第一项ID=-1
			bookType=new BookType();
			bookType.setBookTypeName("请选择...");
			bookType.setId(-1);//请选择的ID为-1
			this.booktypeJcb.addItem(bookType);
			BookTypeJcb.addItem(bookType);
			while(rs.next())
			{
				bookType=new BookType();
				bookType.setId(rs.getInt("id"));
				bookType.setBookTypeName(rs.getString("bookTypeName"));
				this.booktypeJcb.addItem(bookType);//添加项
				BookTypeJcb.addItem(bookType);
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			
		}
	}
	
	/**
	 * 图书检索
	 * @param evt
	 */
private void BookSearchActionPerformed(ActionEvent evt)
{
	String bookName=this.BookNameTxt.getText();
	//String author=this.S_AuthorTxt.getText();
	BookType bookType=(BookType) this.booktypeJcb.getSelectedItem();//返回object类,强转
	int bookTypeId=bookType.getId();	
	Book book=new Book(bookName,bookTypeId);
	this.fillTable(book);	
}
/**
 * 当前借阅信息
 * @param e
 */
private void PreBorrowSearchPerformed(ActionEvent e) 
{
	Borrow borrow=new Borrow(PresentUser);
	this.fillPreBorrowTable(borrow);	
}
//************************初始化表格数据**************************************/
/**
 * 初始化表格数据
 * @param book
 */
private void fillTable(Book book)
{
	DefaultTableModel dtm=(DefaultTableModel) BookSearchJT.getModel();//获取模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		//OperationJp
		ResultSet rs=bookDao.list(con, book);//获取所有记录
		while(rs.next()){
			Vector v=new Vector();//按顺序写
			v.add(rs.getString("id"));
			v.add(rs.getString("bookName"));
			v.add(rs.getString("author"));
			v.add(rs.getString("publisher"));
			v.add(rs.getString("bookDesc"));
			v.add(rs.getString("number"));			
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
/**
 * 初始化当前借阅表格
 * @param borrow
 */
private void fillPreBorrowTable(Borrow borrow)
{
	DefaultTableModel dtm=(DefaultTableModel) PreBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		//PreBorrowJP
		ResultSet prebo=borrowDao.list(con, borrow);//获取所有记录,由用户ID查找
		while(prebo.next()){
			IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
			Vector v=new Vector();//按顺序写
			v.add(prebo.getString("UserID"));
			v.add(prebo.getString("BookName"));
			v.add(prebo.getString("dueTime"));	
			dtm.addRow(v);//加一行
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
}

/**
 * 初始化历史借阅表格
 * @param hisborrow
 */
private void fillHisBorrowTable(HisBorrow hisborrow)
{
	DefaultTableModel dtm=(DefaultTableModel) HisBorrowJtable.getModel();//获取表格模型
	dtm.setRowCount(0); // 设置成0行
	Connection con=null;
	try{
		con=dbUtil.getCon();
		int i=0;//table中从0开始
		if(StringUtil.isEmpty(PresentUser))
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","用户信息获取失败！");
			return;
		}
		else			
		{
			User user=new User(PresentUser);
			ResultSet Hisbo=borrowDao.hisBorrowSearch(con,user);//获取所有记录,由用户ID查找
			while( Hisbo.next()){
				//IDinPreBorJT[i++]=prebo.getInt("ID");//存放ID
				Vector v=new Vector();//按顺序写
				v.add(Hisbo.getString("b.bookName"));
			    v.add(Hisbo.getString("b.author"));
				v.add(Hisbo.getString("b.publisher"));	
				v.add(Hisbo.getDate("bt.borTime"));	
				v.add(Hisbo.getDate("bt.returnTime"));	
				dtm.addRow(v);//加一行
			}
		}		
	}catch(Exception e){
		e.printStackTrace();
	}finally{
		try {
			dbUtil.closeCon(con);
		} catch (Exception e)
		{
			Dialogutil attention=new Dialogutil(null,"Attention!","查询记录失败！");
			e.printStackTrace();
		}
	}	
}
//*********************************************************************/
/**
 * 借书表格行点击事件处理
 * @param e
 */
private void bookSearchJTMousePressed(MouseEvent evt) {
	int row=BookSearchJT.getSelectedRow();//选中行
	IsClickJT=true;
	BookID=Integer.parseInt((String)BookSearchJT.getValueAt(row, 0));
	BookSurplus=Integer.parseInt((String)BookSearchJT.getValueAt(row, 5));
	//BookTypeDescTxt.setText((String)BookSearchJT.getValueAt(row, 2));
}
/**
 * 还书行表格点击事件
 * @param ret
 */
private void bookReturnClick(MouseEvent ret) 
{
	int row=PreBorrowJtable.getSelectedRow();//选中行
	IsClickPreBorrowJT=true;
	BorrowID=IDinPreBorJT[row];	
}
/**
 * 图书借阅事件
 * @param evt
 */
private void borrowActionPerformed(ActionEvent evt) 
{
	if(!IsClickJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要借的书");
		return;
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(BookID);
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			Borrow currentborrow=new Borrow(currentUser.getId(),currentBook.getId(),currentDate);
			if(currentUser!=null)
			{
				int BorrowNumRem=currentUser.getBorrowNumRem();
				if(BorrowNumRem<=0||currentBook.getBookNum()<=0)
					{
					  Dialogutil BorrowError=new Dialogutil(null,"Error!","您所借的书已达上限！");
					}
				else if(BookSurplus<=0)
				{
					Dialogutil BorrowError=new Dialogutil(null,"Error!","该书已经被借完，请等待他人归还！");
				}
				else
					{
					int borrowNum=UserDao.borrow(con, currentUser);//修改读者借书上限
					int bookNum=bookDao.borrow(con, currentBook);//修改库存数量
					borrowDao.add(con, currentborrow);
					if(borrowNum!=-1&&bookNum!=-1)
					{
						showMessageFrame note=new showMessageFrame(null,"借书成功！",showMessageFrame.NORMAL);
						
					}
					else
					{
						showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
					}
					}
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame note=new showMessageFrame(null,"借书失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
	}
	IsClickJT=false;
}	

/**
 * 图书归还事件
 * @param e
 */
protected void returnactionPerformed(ActionEvent e) 
{
	if(!IsClickPreBorrowJT)
	{
		Dialogutil attention=new Dialogutil(null,"Attention!","请选择所要还的书");
	}
	else
	{
		Connection con=null;
		try {
			con=dbUtil.getCon();
			//获取当前还书信息
			Borrow borrow=new Borrow(PresentUser,BorrowID);			
			java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
			
			Borrow preborrow=borrowDao.Search_ID(con, borrow);
			preborrow.setReturnTime(currentDate);
			preborrow.setIsReturn((byte)1);
//			ResultSet prebo=borrowDao.list(con, preborrow);	
//			if(prebo.next())//一定要有这一句，光标下移
//			{
//				preborrow.setBookName(prebo.getString("BookName"));
//				preborrow.setBookID(prebo.getInt("bookId"));
//				preborrow.setBorTime(prebo.getDate("borTime"));
//				preborrow.setDueTime(prebo.getDate("dueTime"));
//			}
			//找到当前书和用户
			User user=new User(PresentUser);
			Book book=new Book(preborrow.getBookID());
			User currentUser=userdao.SearchUser(con, user); 
			Book currentBook=BookDao.BookSearch(con, book);
			//获取系统时间			
			if(currentUser!=null)
			{
				int i1=borrowDao.updateborrow(con, preborrow);
				int i2=borrowDao.updateuser(con, currentUser, preborrow);
				int i3=borrowDao.updatebook(con, currentBook);
				if(i1!=-1&&i2!=-1&&i3!=-1)
				{
					showMessageFrame note=new showMessageFrame(null,"还书成功！",showMessageFrame.NORMAL);
				}
				else
				{
					showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
				}
			}
		} catch (Exception e1)
		{
			showMessageFrame note=new showMessageFrame(null,"还书失败！",showMessageFrame.NOTE);
			e1.printStackTrace();
		}
	}
	ResetValue();
	IsClickPreBorrowJT=false;
}
/**
 * 推荐事件
 * @param rec
 */
private void RecomactionPerformed(ActionEvent rec) {
	// TODO Auto-generated method stub
	String bookTypeDesc=BookDescTxt.getText();
	String bookRecomReason=RecomNameTxt.getText();
	String bookRecomName=RecomNameTxt.getText();
	BookType BookType=(BookType) this.BookTypeJcb.getSelectedItem();//选择书的种类
	int bookTypeId=BookType.getId();
	if(StringUtil.isEmpty(bookRecomName))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所要推荐的书名！",showMessageFrame.NOTE);
		return;
	}
	else if(StringUtil.isEmpty(bookRecomReason))
	{
		showMessageFrame note=new showMessageFrame(null,"请输入所推荐的理由！",showMessageFrame.NOTE);
		return;
	}
	else if(bookTypeId==-1)
	{
		showMessageFrame note=new showMessageFrame(null,"请选择图书种类",showMessageFrame.NOTE);
		return;
	}
	else
	{
		Connection con=null;
		try {
			    con=dbUtil.getCon();
			  //User user=new User(PresentUser);
			    if(!StringUtil.isEmpty(PresentUser))
				{
			    	 BookRecommend bookRecom=new BookRecommend(PresentUser,bookRecomName,bookTypeDesc,bookRecomReason,bookTypeId);
			         int n=BookRecomDao.add(con, bookRecom);	
					if(n==1){
						//JOptionPane.showMessageDialog(null, "图书类别添加成功！");
						showMessageFrame SucNote=new showMessageFrame(null,"图书推荐成功，等待管理员审核！",showMessageFrame.NOTE);
						ResetValue();
					}
					else
					{
						showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
					}
				}
			 else
			    {
			    	showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			    	return;
			    }
		 } 
		catch (Exception e) {
			// TODO Auto-generated catch block
			showMessageFrame FailNote=new showMessageFrame(null,"图书推荐失败！",showMessageFrame.NOTE);
			e.printStackTrace();
		}
		
	}
}

/**
 * 借书历史查询事件
 * @param e
 */
private void hisBorrowactionPerformed(ActionEvent e) 
{
	// TODO Auto-generated method stub
	HisBorrow hisBorrow=new HisBorrow(PresentUser);	
	this.fillHisBorrowTable(hisBorrow);
}

/**
 * 借阅分布统计
 */
private void HisBorrowPieChart(StringBuffer[] TypeBuffer,int[] number)
{
	
}
}
	

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.copy(ReferenceExpression.java:141)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.cachedResolvedCopy(ReferenceExpression.java:819)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:1085)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4790)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4757)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:773)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:700)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1656)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1557)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2524)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:696)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1026)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:634)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.resolveStatements(ConstructorDeclaration.java:600)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:544)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1195)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1308)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:593)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:1030)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:579)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1085)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:724)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:790)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1250)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:128)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:110)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:90)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:154)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:89)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:73)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
