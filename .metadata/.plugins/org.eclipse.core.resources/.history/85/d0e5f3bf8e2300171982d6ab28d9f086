package manager.view;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;

import manager.dao.UserDao;
import manager.util.DbUtil;
import manager.util.StringUtil;
import manager.util.showMessageFrame;

public class RegisterFrm extends JFrame {

//设置跟随分辨率变化窗口
	Toolkit kit = Toolkit.getDefaultToolkit();
    Dimension screenSize = kit.getScreenSize();
	private int screenHeight = (int) screenSize.getHeight();
    private int screenWidth = (int) screenSize.getWidth();
    private double enlargement_x=screenWidth/1920;
    private double enlargement_y=screenHeight/1080;
    
    private int windowWidth ; //获得窗口宽
    private int windowHeight; //获得窗口高
	private JPanel contentPane;
	private JTextField IDTxt;
	private JTextField UserNameTxt;
	private JPasswordField PasswordTxt;
	private JPasswordField PassAgainTxt;
	private DbUtil dbutil=new DbUtil();
	
	UserDao userdao=new UserDao();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RegisterFrm frame = new RegisterFrm();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public RegisterFrm() {
		setTitle("\u65B0\u7528\u6237\u6CE8\u518C");
		setResizable(false);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(screenWidth * 2/7, screenHeight / 3, (int)(1200*enlargement_x),(int)(1100*enlargement_y));
		windowWidth = this.getWidth(); //获得窗口宽
		windowHeight = this.getHeight(); //获得窗口高
		this.setLocation(screenWidth / 2 - windowWidth / 2, screenHeight / 2 - windowHeight / 2);//设置窗口居中显示
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		JLabel label = new JLabel("");
		
		JLabel lblid = new JLabel("\u65B0\u7528\u6237ID");
		lblid.setFont(new Font("宋体", Font.PLAIN, 35));
		
		IDTxt = new JTextField();
		IDTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		IDTxt.setColumns(10);
		
		JLabel label_1 = new JLabel("\u65B0\u7528\u6237\u540D");
		label_1.setFont(new Font("宋体", Font.PLAIN, 35));
		
		UserNameTxt = new JTextField();
		UserNameTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		UserNameTxt.setColumns(10);
		
		JLabel label_2 = new JLabel("\u767B\u5F55\u5BC6\u7801");
		label_2.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton button = new JButton("\u6CE8\u518C");
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				RegisterAction(e);
			}

			
		});
		button.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JButton button_1 = new JButton("\u53D6\u6D88");
		button_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ResetValueAction(e);
			}
		});
		button_1.setFont(new Font("宋体", Font.PLAIN, 35));
		
		PasswordTxt = new JPasswordField();
		PasswordTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		
		JLabel label_3 = new JLabel("\u5BC6\u7801\u786E\u8BA4");
		label_3.setFont(new Font("宋体", Font.PLAIN, 35));
		
		PassAgainTxt = new JPasswordField();
		PassAgainTxt.setFont(new Font("宋体", Font.PLAIN, 35));
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addComponent(label, GroupLayout.PREFERRED_SIZE, 1184, GroupLayout.PREFERRED_SIZE)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(153)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
						.addComponent(lblid)
						.addComponent(label_1)
						.addComponent(label_2)
						.addComponent(label_3))
					.addGap(44)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING, false)
						.addComponent(PassAgainTxt)
						.addComponent(PasswordTxt, 583, 583, Short.MAX_VALUE)
						.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING, false)
							.addComponent(UserNameTxt)
							.addComponent(IDTxt, GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)))
					.addGap(263))
				.addGroup(gl_contentPane.createSequentialGroup()
					.addGap(234)
					.addComponent(button)
					.addPreferredGap(ComponentPlacement.RELATED, 515, Short.MAX_VALUE)
					.addComponent(button_1)
					.addGap(229))
		);
		gl_contentPane.setVerticalGroup(
			gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
					.addComponent(label)
					.addGap(152)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblid)
						.addComponent(IDTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(134)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(label_1)
						.addComponent(UserNameTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(123)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(label_2)
						.addComponent(PasswordTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(145)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(label_3)
						.addComponent(PassAgainTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(94)
					.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
						.addComponent(button)
						.addComponent(button_1))
					.addGap(143))
		);
		contentPane.setLayout(gl_contentPane);
	}
	
	private void RegisterAction(ActionEvent e) {
		// TODO Auto-generated method stub
		String s=new String(this.PassAgainTxt.getPassword()); //判断两次输入的密码是否一致
		String password=new String(this.PasswordTxt.getPassword());
		String userName=UserNameTxt.getText().trim();
		int Id=-1;
		Id=Integer.parseInt(IDTxt.getText().trim());
		Connection con=null;
		try {
			con=dbutil.getCon();
		} catch (Exception e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		if(Id==-1)
		{
			IDTxt.setText("请输入ID");
			return;
		}
		if(StringUtil.isEmpty(userName))
		{
			UserNameTxt.setText("请输入用户名！");
			return;
		}
		if(StringUtil.isEmpty(password))
		{
			showMessageFrame note=new showMessageFrame(null,"请输入密码！",showMessageFrame.NOTE);
			return;
		}
		if(s.trim().equals(password.trim()))
		{
			String sql="SELECT * FROM t_user where id="+"'"+Integer.parseInt(IDTxt.getText())+"'";
			try {
				
				PreparedStatement pstmt=con.prepareStatement(sql);
				ResultSet rs=pstmt.executeQuery();
				if(rs.next())
				{
					showMessageFrame note=new showMessageFrame(null,"用户ID已存在，添加失败！",showMessageFrame.NOTE);
					return;
				}
				else
				{
					
					try {
						int currentUser=userdao.Register(con,Id,userName,password);
						if(currentUser>0)
						{
							showMessageFrame note=new showMessageFrame(null,"创建账户成功！",showMessageFrame.NORMAL);
							this.Reset();
						}
					} catch (Exception evt) {
						// TODO Auto-generated catch block
						evt.printStackTrace();
					}
					
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		else
		{
			showMessageFrame note=new showMessageFrame(null,"两次密码不一致！",showMessageFrame.NOTE);
			this.Reset();
			return;
		}
	}
	
	/**
	 * 清空
	 */
	private void Reset()
	{
		this.UserNameTxt.setText("");
		this.PasswordTxt.setText("");
		this.PassAgainTxt.setText("");
		this.IDTxt.setText("");			
	}
	/**
	 * 重置事件处理
	 * @param evt
	 */
		private void ResetValueAction(ActionEvent evt) {
			// TODO Auto-generated method stub
			this.Reset();
		}
		
		
}
