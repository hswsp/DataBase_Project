package manager.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import manager.entity.Book;
import manager.entity.Borrow;
import manager.entity.User;
import manager.util.DateUtil;
import manager.util.StringUtil;

public class BorrowDao {
	/**
	 * 借书记录添加
	 * @param con
	 * @param borrow
	 * @return
	 * @throws Exception
	 */
	public int add(Connection con,Borrow borrow)throws Exception//返回影响几条记录
	{
		String sql="insert into t_borrow values(?,?,?,?,null,0,null)";
		PreparedStatement pstmt=con.prepareStatement(sql);//创建对象，得到SQL语句
		pstmt.setString(1, borrow.getUserId());//传递参数
		pstmt.setInt(2, borrow.getBookID());
		pstmt.setDate(3, borrow.getBorTime());
		pstmt.setDate(4,DateUtil.DateAdd(borrow.getBorTime(), 60));
		//pstmt.setDate(5,borrow.getBookTypeId());
		return pstmt.executeUpdate();//返回执行结果
	}

	/**
	 * 视图中查询已借阅图书
	 * @param con
	 * @param borrow
	 * @return
	 * @throws Exception
	 */
	public ResultSet list(Connection con,Borrow borrow)throws Exception
	{
		StringBuffer sb=new StringBuffer("select * from unreturned ");
		if (borrow.getID()!=-1)
		{
			sb.append(" and ID="+Integer.toString(borrow.getID()));
		}
		if(StringUtil.isNotEmpty(borrow.getUserId()))
		{
			sb.append(" and UserID="+borrow.getUserId());
		}
		
		PreparedStatement pstmt=con.prepareStatement(sb.toString().replaceFirst("and", "where"));
		//pstmt.setString(1, borrow.getUserId());//传递参数
		return pstmt.executeQuery();//执行
	}
	
//	public ResultSet list(Connection con,Borrow borrow)throws Exception
//	{
//		StringBuffer sb=new StringBuffer("select * from unreturned where UserID=?");
//		PreparedStatement pstmt=con.prepareStatement(sb.toString());
//		pstmt.setString(1, borrow.getUserId());//传递参数
//		return pstmt.executeQuery();//执行
//	}
	
	/**
	 * 还书事件修改borrow表
	 * @param con
	 * @param borrow
	 * @return
	 * @throws Exception
	 */
	public int updateborrow(Connection con,Borrow borrow)throws Exception
	{
		String sql="update t_borrow set returnTime=?,IsReturn=? where ID=?";
		PreparedStatement pstmt=con.prepareStatement(sql);
		pstmt.setDate(1, borrow.getReturnTime());
		pstmt.setByte(2, borrow.getIsReturn());//注意Tinyint取出数据是，getObject()得到boolean型
		pstmt.setInt(3, borrow.getID());
		return pstmt.executeUpdate();
	} 
	/**
	 * 计算用户钱数
	 * @param con
	 * @param user
	 * 需要提前算好时间
	 */
	public void balanceaccount(Connection con,User user,Borrow borrow)
	{
		/**********************
		 * private void change(StringBuilder str) {
             str.append("sds");// 会影响到外面的变量str_outer
             str = new StringBuilder("der");// 不会影响到外面的变量str_outer
                 }
		 * ********************************/		
		float reduce=DateUtil.balanceaccount(borrow.getDueTime(), borrow.getReturnTime());
		user.balanceRedu(reduce);
	}
	/**
	 * 还书事件修改user表
	 * @param con
	 * @param user
	 * @param borrow
	 * @return
	 * @throws Exception
	 */
	public int updateuser(Connection con,User user,Borrow borrow)throws Exception
	{
		balanceaccount(con,user,borrow);//剩余钱数
		String sql="update t_user set borrowNUmRem=?,balance=? where id=?";
		PreparedStatement pstmt=con.prepareStatement(sql);
		pstmt.setInt(1, user.getBorrowNumRem()+1);		
		pstmt.setFloat(2,user.getBalance());//注意Tinyint取出数据是，getObject()得到boolean型
		pstmt.setString(3, user.getId());
		return pstmt.executeUpdate();
	} 
	/**
	 * 还书事件修改book表
	 * @param con
	 * @param book
	 * @return
	 * @throws Exception
	 */
	public int updatebook(Connection con,Book book)throws Exception
	{
		String sql="update t_book set number=? where id=?";
		PreparedStatement pstmt=con.prepareStatement(sql);
		pstmt.setInt(1, book.getBookNum()+1);		
		pstmt.setInt(2, book.getId());
		return pstmt.executeUpdate();
	} 
	
}
